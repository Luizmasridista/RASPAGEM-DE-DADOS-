#!/usr/bin/env python
"""
Script de teste para o sistema de consolida√ß√£o de planilhas.
Este script testa as principais funcionalidades do sistema.
"""

import os
import sys
import pandas as pd
import requests
import time
import shutil
from datetime import datetime
import unittest

# Configura√ß√µes
API_URL = "http://localhost:8000"
PLANILHAS_EXEMPLO_DIR = "planilhas_exemplo"

class TestSistemaConsolidacao(unittest.TestCase):
    """Classe de teste para o sistema de consolida√ß√£o de planilhas."""
    
    @classmethod
    def setUpClass(cls):
        """Prepara√ß√£o para os testes."""
        print("\nüîç Iniciando testes do sistema de consolida√ß√£o...")
        
        # Verificar se a API est√° rodando
        try:
            response = requests.get(f"{API_URL}/status")
            if response.status_code != 200:
                print("‚ùå API n√£o est√° rodando. Inicie o sistema com 'python start.py' antes de executar os testes.")
                sys.exit(1)
        except:
            print("‚ùå API n√£o est√° rodando. Inicie o sistema com 'python start.py' antes de executar os testes.")
            sys.exit(1)
        
        # Criar diret√≥rios necess√°rios
        os.makedirs("planilhas_originais", exist_ok=True)
        os.makedirs("planilha_mestre", exist_ok=True)
        os.makedirs("backups", exist_ok=True)
        
        # Criar planilhas de exemplo se n√£o existirem
        cls.criar_planilhas_exemplo()
    
    @classmethod
    def tearDownClass(cls):
        """Limpeza ap√≥s os testes."""
        print("\nüßπ Limpando arquivos de teste...")
    
    @classmethod
    def criar_planilhas_exemplo(cls):
        """Cria planilhas de exemplo para teste."""
        print("üìä Criando planilhas de exemplo para teste...")
        
        # Criar diret√≥rio para planilhas de exemplo
        os.makedirs(PLANILHAS_EXEMPLO_DIR, exist_ok=True)
        
        # Dados de exemplo para cada estrutura
        estruturas = ["Estrutura_A", "Estrutura_B", "Estrutura_C", "Estrutura_D"]
        
        for i, estrutura in enumerate(estruturas):
            # Criar DataFrame com dados de exemplo
            dados = []
            
            # Adicionar 5 registros para cada estrutura
            for j in range(1, 6):
                dados.append({
                    "Colaborador": f"Colaborador {i+1}-{j}",
                    "Departamento": f"Departamento {(i % 3) + 1}",
                    "Treinamento": f"Treinamento {(j % 4) + 1}",
                    "Carga_Horaria": (j * 4) + (i * 2),
                    "Data_Inicio": datetime.now().strftime("%d/%m/%Y"),
                    "Data_Fim": datetime.now().strftime("%d/%m/%Y"),
                    "Status": ["Em Andamento", "Conclu√≠do", "Pendente"][j % 3]
                })
            
            # Criar DataFrame
            df = pd.DataFrame(dados)
            
            # Salvar planilha
            caminho_arquivo = os.path.join(PLANILHAS_EXEMPLO_DIR, f"{estrutura}.xlsx")
            df.to_excel(caminho_arquivo, index=False)
            
            print(f"  ‚úÖ Planilha {estrutura}.xlsx criada")
        
        print("‚úÖ Todas as planilhas de exemplo foram criadas")
    
    def copiar_planilhas_para_originais(self):
        """Copia as planilhas de exemplo para o diret√≥rio de planilhas originais."""
        print("üìã Copiando planilhas de exemplo para o diret√≥rio de processamento...")
        
        # Limpar diret√≥rio de planilhas originais
        for arquivo in os.listdir("planilhas_originais"):
            os.remove(os.path.join("planilhas_originais", arquivo))
        
        # Copiar planilhas de exemplo
        for arquivo in os.listdir(PLANILHAS_EXEMPLO_DIR):
            if arquivo.endswith(".xlsx"):
                shutil.copy2(
                    os.path.join(PLANILHAS_EXEMPLO_DIR, arquivo),
                    os.path.join("planilhas_originais", arquivo)
                )
                print(f"  ‚úÖ Copiado: {arquivo}")
    
    def test_01_status_api(self):
        """Testa se a API est√° respondendo corretamente."""
        print("\nüß™ Teste 1: Verificando status da API...")
        
        response = requests.get(f"{API_URL}/status")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertIn("status", data)
        self.assertEqual(data["status"], "online")
        
        print("‚úÖ API est√° online e respondendo corretamente")
    
    def test_02_consolidacao(self):
        """Testa o processo de consolida√ß√£o de planilhas."""
        print("\nüß™ Teste 2: Testando consolida√ß√£o de planilhas...")
        
        # Copiar planilhas de exemplo para o diret√≥rio de processamento
        self.copiar_planilhas_para_originais()
        
        # Chamar API de consolida√ß√£o
        response = requests.post(f"{API_URL}/consolidar")
        self.assertEqual(response.status_code, 200)
        
        data = response.json()
        self.assertTrue(data["sucesso"])
        
        # Verificar se a planilha mestre foi criada
        response = requests.get(f"{API_URL}/download-mestre")
        self.assertEqual(response.status_code, 200)
        
        print("‚úÖ Consolida√ß√£o realizada com sucesso")
        
        # Verificar estat√≠sticas
        if "dados" in data and data["dados"]:
            print(f"  üìä Total de registros: {data['dados']['total_registros']}")
            print(f"  üìä Estruturas processadas: {', '.join(data['dados']['estruturas_processadas'])}")
    
    def test_03_backups(self):
        """Testa a funcionalidade de backups."""
        print("\nüß™ Teste 3: Testando sistema de backups...")
        
        # Listar backups
        response = requests.get(f"{API_URL}/listar-backups")
        self.assertEqual(response.status_code, 200)
        
        backups = response.json()
        self.assertIsInstance(backups, list)
        
        # Deve haver pelo menos um backup ap√≥s a consolida√ß√£o
        self.assertGreater(len(backups), 0)
        
        print(f"‚úÖ Sistema de backups funcionando. {len(backups)} backups encontrados.")
        
        # Verificar se √© poss√≠vel baixar o backup mais recente
        if backups:
            backup_mais_recente = backups[0]["nome"]
            response = requests.get(f"{API_URL}/download-backup/{backup_mais_recente}")
            self.assertEqual(response.status_code, 200)
            print(f"‚úÖ Download de backup funcionando corretamente")

if __name__ == "__main__":
    unittest.main()