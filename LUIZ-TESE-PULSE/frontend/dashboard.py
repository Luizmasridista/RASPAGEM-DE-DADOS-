"""
M√≥dulo do Dashboard principal da aplica√ß√£o.
"""

import streamlit as st
import requests
import pandas as pd
from .config import API_URL


def mostrar_dashboard():
    """Exibe o dashboard principal."""
    st.markdown('<h2 class="sub-header">Dashboard</h2>', unsafe_allow_html=True)
    
    # Adicionar explica√ß√£o sobre o sistema
    st.markdown('''
    <div style="background-color: #E8F5E9; padding: 15px; border-radius: 5px; border-left: 5px solid #4CAF50;">
        <h3 style="color: #2E7D32;">üìä Bem-vindo ao Sistema de Consolida√ß√£o</h3>
        <p><strong>Como funciona:</strong></p>
        <ol>
            <li>Fa√ßa upload das 4 planilhas de treinamento</li>
            <li>Execute a consolida√ß√£o autom√°tica</li>
            <li>Baixe a planilha mestre consolidada</li>
            <li>Acesse backups de consolida√ß√µes anteriores</li>
        </ol>
    </div>
    ''', unsafe_allow_html=True)
    
    # Estat√≠sticas do sistema
    _mostrar_estatisticas()
    
    # Status das planilhas
    _mostrar_status_planilhas()


def _mostrar_estatisticas():
    """Mostra estat√≠sticas do sistema."""
    st.markdown("### üìà Estat√≠sticas do Sistema")
    
    try:
        response = requests.get(f"{API_URL}/status")
        if response.status_code == 200:
            status_data = response.json()
            
            # Criar colunas para as m√©tricas
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    label="Planilha Mestre",
                    value="Dispon√≠vel" if status_data['planilha_mestre']['existe'] else "N√£o dispon√≠vel",
                    delta="‚úÖ" if status_data['planilha_mestre']['existe'] else "‚ùå"
                )
            
            with col2:
                st.metric(
                    label="Total de Backups",
                    value=status_data['backups']['total'],
                    delta=f"+{status_data['backups']['total']}" if status_data['backups']['total'] > 0 else None
                )
            
            with col3:
                if status_data['planilha_mestre']['existe']:
                    st.metric(
                        label="√öltima Modifica√ß√£o",
                        value=status_data['planilha_mestre']['ultima_modificacao'][:10] if status_data['planilha_mestre']['ultima_modificacao'] else "N/A"
                    )
                else:
                    st.metric(
                        label="√öltima Modifica√ß√£o",
                        value="N/A"
                    )
            
            with col4:
                if status_data['backups']['ultimo']:
                    st.metric(
                        label="√öltimo Backup",
                        value=status_data['backups']['ultimo'][:10]
                    )
                else:
                    st.metric(
                        label="√öltimo Backup",
                        value="N/A"
                    )
        else:
            st.error("Erro ao obter estat√≠sticas do sistema.")
    except Exception as e:
        st.error(f"Erro de conex√£o: {str(e)}")


def _mostrar_status_planilhas():
    """Mostra o status das planilhas originais."""
    st.markdown("### üìã Status das Planilhas Originais")
    
    # Verificar se existem planilhas na pasta
    import os
    planilhas_dir = "planilhas_originais"
    
    if os.path.exists(planilhas_dir):
        arquivos = [f for f in os.listdir(planilhas_dir) if f.endswith(('.xlsx', '.xls'))]
        
        if arquivos:
            # Criar tabela com informa√ß√µes dos arquivos
            dados_planilhas = []
            for arquivo in arquivos:
                caminho = os.path.join(planilhas_dir, arquivo)
                tamanho = os.path.getsize(caminho) / 1024  # KB
                modificacao = os.path.getmtime(caminho)
                from datetime import datetime
                data_mod = datetime.fromtimestamp(modificacao).strftime('%d/%m/%Y %H:%M')
                
                dados_planilhas.append({
                    "Arquivo": arquivo,
                    "Tamanho (KB)": f"{tamanho:.1f}",
                    "√öltima Modifica√ß√£o": data_mod,
                    "Status": "‚úÖ Pronto"
                })
            
            df = pd.DataFrame(dados_planilhas)
            st.dataframe(df, use_container_width=True)
            
            if len(arquivos) >= 4:
                st.success("‚úÖ Todas as 4 planilhas est√£o dispon√≠veis para consolida√ß√£o!")
            else:
                st.warning(f"‚ö†Ô∏è Apenas {len(arquivos)} de 4 planilhas dispon√≠veis.")
        else:
            st.warning("‚ö†Ô∏è Nenhuma planilha encontrada na pasta 'planilhas_originais'.")
    else:
        st.warning("‚ö†Ô∏è Pasta 'planilhas_originais' n√£o encontrada.")
    
    # Instru√ß√µes r√°pidas
    st.markdown("### üöÄ Pr√≥ximos Passos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Para come√ßar:**
        1. V√° para "Upload de Planilhas"
        2. Fa√ßa upload das 4 planilhas
        3. Execute a consolida√ß√£o
        """)
    
    with col2:
        st.markdown("""
        **Recursos dispon√≠veis:**
        - Dashboard com estat√≠sticas
        - Upload de m√∫ltiplas planilhas
        - Consolida√ß√£o autom√°tica
        - Sistema de backups
        """)
